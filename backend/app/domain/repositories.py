from typing import Protocol, Sequence, Optional

from app.domain.entities import User, Profile, Company, Community, Membership, Post, Story, Event, Follow, OTP, Media


class IUserRepo(Protocol):
    async def get_by_id(self, user_id: str) -> Optional[User]: ...

    async def get_by_phone(self, phone: str) -> Optional[User]: ...

    async def get_by_email(self, email: str) -> Optional[User]: ...

    async def create_student(self, phone: str) -> User: ...

    async def create_company(self, email: str, password_hash: str, name: str) -> User: ...


class IOTPRepo(Protocol):
    async def issue(self, phone: str, code: str, ttl_seconds: int) -> OTP: ...

    async def verify(self, phone: str, code: str) -> bool: ...


class IProfileRepo(Protocol):
    async def create(self, user_id: str, **data) -> Profile: ...

    async def get(self, profile_id: str) -> Optional[Profile]: ...

    async def update(self, user_id: str, **data) -> Profile: ...


class ICommunityRepo(Protocol):
    async def create(self, **data) -> Community: ...

    async def update(self, community_id: str, **data) -> Community: ...

    async def archive(self, community_id: str) -> Community: ...

    async def get(self, community_id: str) -> Optional[Community]: ...

    async def list_for_user(self, user_id: str) -> Sequence[Community]: ...

    async def list_for_company(self, company_id: str) -> Sequence[Community]: ...


class IMembershipRepo(Protocol):
    async def join(self, user_id: str, community_id: str) -> Membership: ...

    async def exit(self, user_id: str, community_id: str) -> None: ...


class IFollowRepo(Protocol):
    async def follow(self, user_id: str, community_id: str) -> Follow: ...

    async def unfollow(self, user_id: str, community_id: str) -> None: ...


class IPostRepo(Protocol):
    async def create(self, **data) -> Post: ...

    async def update(self, post_id: str, **data) -> Post: ...

    async def get(self, post_id: str) -> Optional[Post]: ...

    async def list_featured(self, limit: int = 20) -> Sequence[Post]: ...

    async def search(self, query: str, limit: int = 20) -> Sequence[Post]: ...


class IStoryRepo(Protocol):
    async def create(self, **data) -> Story: ...

    async def list(self, limit: int = 20) -> Sequence[Story]: ...

    async def get(self, story_id: str) -> Optional[Story]: ...


class IEventRepo(Protocol):
    async def list_for_user(self, user_id: str) -> Sequence[Event]: ...


class ICompanyRepo(Protocol):
    async def get_companies_for_user(self, user_id: str) -> Sequence[Company]: ...


class IMediaRepo(Protocol):
    async def create(self, *, uid: str, kind: str, mime: str, ext: str | None, size: int, url: str) -> Media: ...

    async def get(self, media_id: str) -> Optional[Media]: ...

    async def list_for_post(self, post_id: str) -> Sequence[Media]: ...

    async def attach_to_post(self, post_id: str, media_ids: list[str]) -> None: ...
