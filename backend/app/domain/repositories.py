from typing import Protocol, Sequence, Optional

from app.domain.entities import (
    User,
    Profile,
    Company,
    Community,
    Membership,
    Post,
    Story,
    Event,
    Follow,
    CompanyFollow,
    OTP,
    Media,
    EventParticipant,
)


class IUserRepo(Protocol):
    async def get_by_id(self, user_id: str) -> Optional[User]: ...

    async def get_by_phone(self, phone: str) -> Optional[User]: ...

    async def get_by_email(self, email: str) -> Optional[User]: ...

    async def create_student(self, phone: str) -> User: ...

    async def create_company(self, email: str, password_hash: str, name: str) -> User: ...

    async def ensure_company_by_phone(self, phone: str) -> User: ...

    async def create_admin(self, email: str, password_hash: str) -> User: ...

    async def list_all(self) -> Sequence[User]: ...


class IOTPRepo(Protocol):
    async def issue(self, phone: str, code: str, ttl_seconds: int) -> OTP: ...

    async def verify(self, phone: str, code: str) -> bool: ...


class IProfileRepo(Protocol):
    async def create(self, user_id: str, **data) -> Profile: ...

    async def get(self, profile_id: str) -> Optional[Profile]: ...

    async def update(self, user_id: str, **data) -> Profile: ...

    async def get_by_user_id(self, user_id: str) -> Optional[Profile]: ...

    async def get_or_create_for_user(self, user_id: str) -> Profile: ...


class ICommunityRepo(Protocol):
    async def create(self, **data) -> Community: ...

    async def update(self, community_id: str, **data) -> Community: ...

    async def archive(self, community_id: str) -> Community: ...

    async def get(self, community_id: str) -> Optional[Community]: ...

    async def list_for_user(self, user_id: str) -> Sequence[Community]: ...

    async def list_for_company(self, company_id: str) -> Sequence[Community]: ...

    async def list_all(self) -> Sequence[Community]: ...

    async def list_joinable(self, user_id: str, *, offset: int = 0, limit: int = 20) -> Sequence[Community]: ...

    async def list_by_ids(self, ids: Sequence[str]) -> Sequence[Community]: ...


class IMembershipRepo(Protocol):
    async def join(self, user_id: str, community_id: str) -> Membership: ...

    async def exit(self, user_id: str, community_id: str) -> None: ...

    async def list_user_ids_for_community(self, community_id: str) -> Sequence[str]: ...

    async def counts_for_communities(self, community_ids: Sequence[str]) -> dict[str, int]: ...


class IFollowRepo(Protocol):
    async def follow(self, user_id: str, community_id: str) -> Follow: ...

    async def unfollow(self, user_id: str, community_id: str) -> None: ...

    async def list_community_ids_for_user(self, user_id: str) -> Sequence[str]: ...


class IPostRepo(Protocol):
    async def create(self, **data) -> Post: ...
    async def update(self, post_id: str, **data) -> Post: ...
    async def get(self, post_id: str) -> Optional[Post]: ...
    async def list_featured(self, limit: int = 20) -> Sequence[Post]: ...
    async def list_featured_for_user(self, user_id: str, limit: int = 20) -> Sequence[Post]: ...
    async def list_latest_for_user(self, user_id: str, limit: int = 20) -> Sequence[Post]: ...
    async def search(self, query: str, limit: int = 20) -> Sequence[Post]: ...
    async def list_for_followed_communities(self, user_id: str, limit: int = 20) -> Sequence[Post]: ...
    async def list_for_communities(self, community_ids: Sequence[str], limit: int = 20) -> Sequence[Post]: ...
    async def list_for_community(self, community_id: str, *, offset: int = 0, limit: int = 20) -> Sequence[Post]: ...


class IStoryRepo(Protocol):
    async def create(self, **data) -> Story: ...
    async def list(self, limit: int = 20) -> Sequence[Story]: ...
    async def get(self, story_id: str) -> Optional[Story]: ...
    async def list_for_companies(self, company_ids: Sequence[str], limit: int = 20) -> Sequence[Story]: ...

class IEventRepo(Protocol):
    async def list_for_user(self, user_id: str, limit: int = 20) -> Sequence[Event]: ...
    async def list_joined_for_user(self, user_id: str, limit: int = 20) -> Sequence[Event]: ...
    async def list_all_upcoming(self, limit: int = 20) -> Sequence[Event]: ...
    async def join(self, user_id: str, event_id: str) -> EventParticipant: ...
    async def create(
        self,
        *,
        community_id: str,
        title: str,
        event_date,
        city: str | None = None,
        location: str | None = None,
        description: str | None = None,
        registration: str | None = None,
        format: str | None = None,
        media_id: str | None = None,
        tags: Sequence[str] | None = None,
        skill_ids: Sequence[str] | None = None,
        cost: int | None = None,
        participant_payout: int | None = None,
    ) -> Event: ...


class ICompanyRepo(Protocol):
    async def get(self, company_id: str) -> Optional[Company]: ...

    async def create(self, *, name: str, description: str | None = None, owner_user_id: str | None = None) -> Company: ...

    async def update(self, company_id: str, **data) -> Company: ...

    async def get_companies_for_user(self, user_id: str) -> Sequence[Company]: ...

    async def list_all(self) -> Sequence[Company]: ...

    async def get_by_owner(self, user_id: str) -> Optional[Company]: ...


class IMediaRepo(Protocol):
    async def create(self, *, uid: str, kind: str, mime: str, ext: str | None, size: int, url: str) -> Media: ...

    async def get(self, media_id: str) -> Optional[Media]: ...

    async def list_for_content(self, content_id: str) -> Sequence[Media]: ...

    async def attach_to_content(self, content_id: str, media_ids: list[str]) -> None: ...

    # Company media attachments
    async def list_for_company(self, company_id: str) -> Sequence[Media]: ...

    async def replace_for_company(self, company_id: str, media_ids: list[str]) -> None: ...


class ICompanyFollowRepo(Protocol):
    async def follow(self, user_id: str, company_id: str) -> CompanyFollow: ...

    async def unfollow(self, user_id: str, company_id: str) -> None: ...

    async def list_company_ids_for_user(self, user_id: str) -> Sequence[str]: ...

    async def list_companies_for_user(self, user_id: str) -> Sequence[Company]: ...
